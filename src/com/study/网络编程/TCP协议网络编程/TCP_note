1.TCP网络通信：
	利用ServerSocket建立 TCP服务器，利用Socket建立TCP客户端。
	服务器端通过ServerSocket建立监听(监听来自客户端的Socket连接，没有则等侍)，
	客户端端通过Socket连接到指定服务器后，通信双方就可通过IO流进行通信。
		
2.UDP网络通信：
	用DatagramSocket(码头)来发送、接收数据报，用DatagramPacket(集装箱)封装数据，用MulticastSocket来实现多点广播通信。

3.IP（Internet Protocol）地址：网络协议
	可唯一确定网络上的一个通信实体。IP地址是一个32位整数，为了方便记忆，通常将它划分成：
	4个8位的二进制整数，如：192.168.2.181
	
4.端口：
	是一个16位的整数，用于表示将数据交给哪个通信程序处理。如果我们把IP地址理解为某人的地址，
	要找到这个人，仅IP地址还不够，还需知道他所在的房间号。人是程序，则房间号是端口号。
	同一台机器上不可能有两个程序使用同一端口号。MySQL数据库端口号是：3306。
	
5.TCP协议基础：
	IP协议负责将消息从一个主机传送到另一个主机，消息在传递的过程中被分割成一个个的小包。
	但IP协议不能解决数据分组在传输过程中可能出现的问题，而TCP协议能提供可靠的通信连接。
	TCP协议是一种端对端协议，当一台计算机要与另一台连接时，TCP协议会让它们建立一个连接：
		用于发送和接收数据的虚拟链路。因为此也说TCP协议是面向连接的。
	TCP协议负责收集信息包，并将其按适当的顺序放好传送，接收到后再将其还原；TCP保证了数据包在传送中的准确。
	TCP协议的重发机制：
		当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体的确认信息，如果未收到，则会重发。
	IP和TCP虽功能不尽相同，也可分开单独使用，但它们在功能上是互补的。只有两者结合，才能保证Internet在复杂的
	环境下正常动行。凡要连接到Internet的计算机，都必须同时有这两个协议，因此常把它俩统称为TCP/IP协议。
	
6.使用ServerSocket创建TCP服务器：
	/*
	 * 构造：
	 * ServerSocket(int port): 用指定的端口(0~65535)创建一个ServerSocket：客户端访问时也要是访端口
	 * ServerSocket(int port,int backlog): backlog:改变连接队列长度的参数
	 * ServerSocket(int port,int backlog,InetAddress addr):机器存在多个IP时，通过addr绑定指定的IP地址。
	 */
	server = new ServerSocket(10000);//推荐用1万以上的端口，避免冲突
	/*accept()方法：
	 * 监听客户端连接请求，如果接收到，该方法会返回一个与客户端Socket对应的Socket，
	 * 否则该方法一直处于等待状态，线程也被阻塞。
	 * */
	while(true){//之所有用死循环，因为可能会有多个客户端来访问
		Socket socket = server.accept();
		socket.setSoTimeout(10000);//10秒后还未读写完成，就会招抛出SocketTimeoutException异常
		
		//将Socket对应的输出流包装成PrintStream
		PrintStream ps = new PrintStream(socket.getOutputStream());			
		ps.print("您好，我是来自服务器的信息");//进行普通IO操作
					
		ps.close();//关闭输出流
		socket.close();//关闭Socket
	}

7.使用Socket进行通信
	/*
	 * Socket常用构造器：
	 * 1.Socket(InetAddress address, int port) ：并将其连接到指定 IP地址的指定端口号。
	 * 2.Socket(String host, int port)：   将其连接到指定主机上的指定端口号。用的较多。
	 * 3.Socket(InetAddress address, int port, InetAddress localAddr, int localPort): 
  	 *  创建一个套接字并将其连接到指定远程地址上的指定远程端口,并指定本地IP地址和本地端口号，适于本地主机有多个IP的情形
	 */
		//连接指定服务器，让服务器的ServerSocket的accept()向下执行。于是服务器端和客户端就产生一对互相连接的Socket
		Socket socket = new Socket("192.168.2.181", 10000);
		
		socket.setSoTimeout(10000);//10秒后还未读写完成，就会招抛出SocketTimeoutException异常
		
		//将Socket对应的输入流包装成BufferedReader
		BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		String line = br.readLine();
		System.out.println("来自服务器的数据："+line);
				
		//关闭输入流、Socket
		br.close();
		socket.close();
		
8.设定Socket连接服务器超时：
	即经过指定时间还未连接到远程服务器，则系统认为该Socket连接超时。
	先创建一个无连接的Socket，再调用connect()方法连接远程服务器：
	Socket socket = new Socket();
	socket.(SocketAddress endpoint, int timeout) ;//将此套接字连接到服务器，并指定一个超时值。
	SocketAddress是抽象类
	
9.Socket类：详情参见JDK的API	
	
	
10.SocketAddress类：	
	它是抽象类，其子类为：InetSocketAddress 类，有如下构造、方法：
	10.1构造：
		InetSocketAddress(InetAddress addr, int port) ; 根据 IP 地址和端口号创建套接字地址。 
		InetSocketAddress(int port) ;//创建套接字地址，其中 IP 地址为通配符地址，端口号为指定值。 
		InetSocketAddress(String hostname, int port) ;//根据主机名和端口号创建套接字地址。 
	10.2方法：	
		boolean equals(Object obj)：将此对象与指定对象比较。 
 		InetAddress getAddress() ：  获取 InetAddress。 
 		String getHostName() ：获取 hostname。 
 		int getPort() ：获取端口号。 
	
11.	参见《疯狂JAVA讲义》第17章的17.3.4加入多线程实现C/S系统的群发、17.3.5记录用户信息实现C/S系统的私聊。
	该项目里的CS系统也有相关讲解及代码示例
	
12.半关闭：
	在我们的例子里，总是处理的一行数据，但实际上是有多行数据的。这时，需要知道Socket的输出流是如何表示结束的？
	不能用关闭输出流的办法表示已经输出结束，因为这样该输出流对应的Socket也将关闭，于是可用Socket的两个半关闭方法：
	半关闭输入流：shutdownInput();//关闭输入流后表示数据发送完成，此时仍可通过该Socket的输出流输出数据
	半关闭输出流：shutdownOutput();//关闭输出流后，此时仍可通过该Socket的输入流读取数据。
	半读状态：isInputShutdown();
	半写状态：isOutputShutdown(); 
	当先后调用shutdownInput、shutdownOutput方法后，该Socket实例依然未关闭，只是不能输出数据和读数据了。
	
13.	NIO（New IO:新IO）实现非阻塞Socket通信：开发高性能网络服务器
	.
	.
	.
	等学过New IO后再来看
	
	
	
	
	
	
	